use aaru::server::route::router_service::router_service_client::RouterServiceClient;
use aaru::server::route::router_service::{
    ClosestSnappedPointRequest, Coordinate, Costing, MapMatchRequest, RouteRequest,
};
use geo::{coord, line_string, wkt, LineString};
use std::fmt::Error;

use tokio;
use tokio::time::Instant;
use tonic;
use tonic::transport::Channel;
use wkt::ToWkt;

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    let channel = Channel::from_static("http://[::1]:9001").connect().await?;
    let mut client = RouterServiceClient::new(channel);

    // let request = tonic::Request::new(ClosestSnappedPointRequest {
    //     point: Some(Coordinate {
    //         latitude: 34.16878890991211,
    //         longitude: -118.84159851074219,
    //     }),
    //     search_radius: 100.0,
    // });
    //
    // let response = client.closest_snapped_point(request).await?;
    // println!("response = {:?}", response);
    //
    // unimplemented!();

    // let to_match = wkt! { LINESTRING(-118.14936828613281 34.15208435058594,-118.15211486816406 34.151512145996094,-118.15445709228516 34.15047836303711,-118.15656280517578 34.14927673339844,-118.16122436523438 34.14686965942383,-118.16417694091797 34.146121978759766,-118.16709899902344 34.1453857421875,-118.1808853149414 34.14147186279297,-118.18374633789062 34.142112731933594,-118.18879699707031 34.1445426940918,-118.1934585571289 34.146724700927734,-118.19573211669922 34.14777374267578,-118.19840240478516 34.148338317871094,-118.20127868652344 34.1479606628418,-118.20399475097656 34.146793365478516,-118.21334075927734 34.145103454589844,-118.21957397460938 34.145145416259766,-118.22274017333984 34.14567184448242,-118.22589874267578 34.14650344848633,-118.22881317138672 34.147823333740234,-118.24102020263672 34.155513763427734,-118.2472915649414 34.156578063964844,-118.26744842529297 34.15580368041992,-118.27687072753906 34.153648376464844,-118.2857666015625 34.15437316894531,-118.28829193115234 34.15542984008789,-118.29085540771484 34.155494689941406,-118.2992172241211 34.15620803833008,-118.30211639404297 34.15663528442383,-118.30802917480469 34.155853271484375,-118.31346893310547 34.154624938964844,-118.31629180908203 34.1549186706543,-118.32196044921875 34.15471267700195,-118.33056640625 34.15297317504883,-118.33651733398438 34.1530647277832,-118.3395767211914 34.153663635253906,-118.34278869628906 34.15404510498047,-118.34601593017578 34.15420150756836,-118.35194396972656 34.153297424316406,-118.35479736328125 34.153053283691406,-118.36084747314453 34.15327453613281,-118.3670883178711 34.15322494506836,-118.38282012939453 34.154640197753906,-118.38558959960938 34.15461349487305,-118.38838958740234 34.15461349487305,-118.39124298095703 34.15458679199219,-118.39413452148438 34.15459060668945,-118.40228271484375 34.156314849853516,-118.40511322021484 34.15687561035156,-118.41387176513672 34.156917572021484,-118.41668701171875 34.15691375732422,-118.4196548461914 34.15691375732422,-118.42890930175781 34.155738830566406,-118.43180847167969 34.15576171875,-118.43762969970703 34.15578842163086,-118.4404296875 34.15563201904297,-118.44328308105469 34.1552734375,-118.44585418701172 34.155845642089844,-118.44840240478516 34.15700149536133,-118.45941925048828 34.15924072265625,-118.46223449707031 34.15958023071289,-118.47279357910156 34.164306640625,-118.48946380615234 34.165340423583984,-118.49462127685547 34.16651916503906,-118.50147247314453 34.170753479003906,-118.50682067871094 34.17142105102539,-118.51219940185547 34.171356201171875,-118.5194091796875 34.17131805419922,-118.5275650024414 34.17134094238281,-118.5301742553711 34.171531677246094,-118.532958984375 34.172481536865234,-118.54495239257812 34.17360305786133,-118.57272338867188 34.17177963256836,-118.57816314697266 34.16971206665039,-118.58082580566406 34.168766021728516,-118.58978271484375 34.168373107910156,-118.60240936279297 34.170310974121094,-118.60814666748047 34.17091751098633,-118.61338806152344 34.168678283691406,-118.61873626708984 34.166099548339844,-118.62477111816406 34.16416549682617,-118.62772369384766 34.163116455078125,-118.63923645019531 34.158897399902344,-118.64205932617188 34.157859802246094,-118.650390625 34.15431213378906,-118.66248321533203 34.150333404541016,-118.66483306884766 34.14979553222656,-118.66728973388672 34.1495475769043,-118.67250061035156 34.1492805480957,-118.67781829833984 34.15078353881836,-118.68923950195312 34.150753021240234,-118.69487762451172 34.15091323852539,-118.69713592529297 34.14954376220703,-118.70330047607422 34.14419174194336,-118.70569610595703 34.14285659790039,-118.70802307128906 34.14165115356445,-118.71907806396484 34.138832092285156,-118.72441864013672 34.13825607299805,-118.72762298583984 34.13811111450195,-118.73292541503906 34.140811920166016,-118.7352294921875 34.14236068725586,-118.73782348632812 34.14325714111328,-118.74083709716797 34.14329528808594,-118.7440185546875 34.143272399902344,-118.74725341796875 34.14372253417969,-118.75052642822266 34.14440155029297,-118.76377868652344 34.14643096923828,-118.77362060546875 34.14756393432617,-118.77684783935547 34.14738464355469,-118.78012084960938 34.14712905883789,-118.78910827636719 34.146446228027344,-118.79216003417969 34.14629364013672,-118.79519653320312 34.14659881591797,-118.80105590820312 34.14825439453125,-118.8041000366211 34.149192810058594,-118.80699920654297 34.15010070800781,-118.82154846191406 34.155372619628906,-118.82404327392578 34.15704345703125,-118.82904815673828 34.16038131713867,-118.83412170410156 34.16381072998047,-118.84159851074219 34.16878890991211,-118.8468017578125 34.172218322753906,-118.8581314086914 34.176185607910156,-118.86113739013672 34.17638397216797,-118.86412811279297 34.17660140991211,-118.86724853515625 34.17682647705078,-118.8796157836914 34.17788314819336,-118.88247680664062 34.179115295410156,-118.887939453125 34.18182373046875,-118.89051818847656 34.1831169128418,-118.89311981201172 34.184295654296875,-118.8994140625 34.184669494628906,-118.91251373291016 34.18446350097656) };
    let easier = wkt! { LINESTRING (-118.618736 34.1661, -118.624771 34.164165, -118.627724 34.163116, -118.639236 34.158897, -118.642059 34.15786, -118.650391 34.154312, -118.662483 34.150333, -118.664833 34.149796) };
    // let not_one_way= wkt ! { LINESTRING (-118.624921 34.171867, -118.639126 34.171903, -118.643117 34.177157, -118.638396 34.178719, -118.632731 34.178897) };
    // let easiest = wkt! { LINESTRING (-118.618736 34.1661, -118.624771 34.164165) };

    let as_coords = easier
        .coords()
        .map(|c| Coordinate {
            longitude: c.x,
            latitude: c.y,
        })
        .collect::<Vec<_>>();

    let route = tonic::Request::new(MapMatchRequest {
        data: as_coords,
        breakage_distance: None,
        search_distance: Some(200.0),
        timestamps: vec![],
        costing_method: i32::from(Costing::Car),
    });

    let start = Instant::now();
    let response = client.map_match(route).await?.into_inner();

    let linestring = response
        .matchings
        .first()
        .ok_or(Error)?
        .snapped_shape
        .iter()
        .map(|coord| coord! { x: coord.longitude, y: coord.latitude })
        .collect::<LineString>();

    let interpolated = response
        .matchings
        .first()
        .ok_or(Error)?
        .interpolated
        .iter()
        .map(|coord| coord! { x: coord.longitude, y: coord.latitude })
        .collect::<LineString>();

    println!("Routed points: {}", linestring.wkt_string());
    println!("Interpolated path: {}", interpolated.wkt_string());

    let elapsed = start.elapsed();
    println!("In: {}us ({}ms)", elapsed.as_micros(), elapsed.as_millis());

    Ok(())
}
