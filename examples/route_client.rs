use aaru::server::route::router_service::router_service_client::RouterServiceClient;
use aaru::server::route::router_service::{Coordinate, Costing, MapMatchRequest};
use geo::{coord, wkt, LineString};
use std::fmt::Error;
use std::fs::File;
use std::io::Write;
use tokio;
use tokio::time::Instant;
use tonic;
use tonic::transport::Channel;
use wkt::ToWkt;

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    let channel = Channel::from_static("http://[::1]:9001").connect().await?;
    let mut client = RouterServiceClient::new(channel);

    // let request = tonic::Request::new(ClosestSnappedPointRequest {
    //     point: Some(Coordinate {
    //         latitude: 34.16878890991211,
    //         longitude: -118.84159851074219,
    //     }),
    //     search_radius: 100.0,
    // });
    //
    // let response = client.closest_snapped_point(request).await?;
    // println!("response = {:?}", response);
    //
    // unimplemented!();

    let lax = wkt! { LINESTRING (-118.39284413793104 33.95046379310345,-118.39299413793103 33.950623793103446,-118.39299413793103 33.95062793103449,-118.39221517241378 33.95125586206896,-118.39215620689654 33.951256896551726,-118.39205827586207 33.95126068965517,-118.39193620689656 33.951265862068965,-118.39193620689656 33.951265862068965,-118.39181827586208 33.95348793103449,-118.39050620689656 33.952772758620696,-118.38869413793103 33.95263172413793,-118.38683310344828 33.95263,-118.38588413793104 33.95196,-118.38592827586207 33.94996896551724,-118.38595310344827 33.94892379310345,-118.38598413793103 33.947756896551724,-118.38601413793103 33.94685586206897,-118.38603931034483 33.9462148275862,-118.38604206896551 33.94614172413793,-118.38606724137931 33.94549275862069,-118.38562827586208 33.94538482758621,-118.38469620689655 33.94539,-118.3824151724138 33.94539896551724,-118.38166517241379 33.94540068965517,-118.38092 33.94540172413794,-118.37987413793104 33.9454048275862,-118.37938517241379 33.94540586206897,-118.37918931034483 33.94540586206897,-118.37877724137931 33.94540275862069,-118.37799206896551 33.9453148275862,-118.37570931034483 33.945301724137934,-118.37283206896552 33.945318965517245,-118.3711251724138 33.94532586206897,-118.36947206896551 33.94533793103449,-118.36947206896551 33.94533793103449,-118.36708724137931 33.94537,-118.36512724137931 33.94537275862069,-118.36483724137932 33.94537379310344,-118.36352620689655 33.94537379310344,-118.36188827586207 33.94536689655172,-118.36088517241379 33.94536793103448,-118.36013310344828 33.94536896551725,-118.35351 33.945386896551724,-118.35278827586207 33.94539379310345,-118.35278 33.94539379310345,-118.34726724137931 33.945382758620696,-118.34618413793103 33.94539068965517,-118.34430620689656 33.945391724137934,-118.34368103448276 33.94539379310345,-118.34324517241379 33.94539379310345,-118.34129206896552 33.94540068965517,-118.3401551724138 33.9454048275862,-118.33823310344827 33.945410689655176,-118.3360351724138 33.94541689655172,-118.33538724137931 33.94541896551725,-118.33497517241379 33.945420689655165,-118.33476931034483 33.945420689655165,-118.33289206896552 33.94542689655172,-118.33284724137931 33.94542793103449,-118.33229827586207 33.94542793103449,-118.33097827586207 33.94542896551724,-118.32939413793103 33.945420689655165,-118.32801931034483 33.945413793103455,-118.32650103448276 33.945413793103455,-118.32569827586207 33.94541689655172,-118.32175931034483 33.945420689655165,-118.31951103448276 33.94540275862069,-118.31813 33.94546586206897,-118.31789413793103 33.94546586206897,-118.31100413793104 33.94546482758621,-118.30953206896552 33.94546068965518,-118.30918103448276 33.94546068965518,-118.30915827586207 33.94546,-118.30845620689655 33.94546,-118.30527517241379 33.94546689655172,-118.30365620689656 33.94547,-118.30049103448276 33.94544379310345,-118.30048310344827 33.94544379310345,-118.29970413793103 33.94544689655173,-118.29628 33.945481724137935,-118.29528034482759 33.94548379310345,-118.29206827586208 33.94548379310345,-118.29206034482758 33.94548379310345,-118.29201517241378 33.94548379310345,-118.29127310344828 33.94549379310345,-118.28981 33.945498965517245,-118.28662827586207 33.94551,-118.28649827586207 33.945510689655165,-118.2852851724138 33.94551482758621,-118.28239413793104 33.945532758620686,-118.28212724137931 33.945532758620686,-118.28055517241378 33.945543793103454,-118.27870931034482 33.945544827586204,-118.27780931034482 33.94555,-118.27768724137931 33.94554896551725,-118.27704517241379 33.94555172413793,-118.27391 33.94557793103448,-118.27340620689655 33.94557896551724,-118.27325413793103 33.94558000000001,-118.27216310344828 33.94558172413794,-118.2706672413793 33.94559068965518,-118.2691572413793 33.94560172413793,-118.26737206896551 33.9456,-118.26575310344828 33.945597931034484,-118.2653651724138 33.945600689655166,-118.26521310344827 33.945602758620694,-118.26515517241378 33.94518586206897,-118.26516206896551 33.94397689655172,-118.26516206896551 33.9438848275862,-118.26516206896551 33.94386586206896,-118.26471000000001 33.943741724137936,-118.26464931034482 33.94373896551724,-118.26125310344827 33.94330896551725,-118.25828517241379 33.94330275862069,-118.2507172413793 33.94328068965517,-118.24926034482758 33.94328068965517,-118.24877103448276 33.94328,-118.24869517241379 33.94328,-118.24784103448276 33.94327586206897,-118.2466051724138 33.94325379310345,-118.24643 33.94324896551724,-118.24594931034483 33.94323586206896,-118.24278931034482 33.94319172413793,-118.24278103448276 33.94319172413793,-118.24221931034484 33.94322482758621,-118.23951 33.943146896551724,-118.2393951724138 33.94314482758621,-118.23935 33.943143793103445,-118.23754931034483 33.943134827586206,-118.23675310344828 33.94359896551724,-118.23675310344828 33.94364896551724,-118.23675931034484 33.94560482758621,-118.23661206896551 33.94569,-118.23479724137931 33.946537931034484,-118.23359034482758 33.946529999999996,-118.23243 33.94652068965517,-118.23126931034483 33.94652068965517,-118.2305672413793 33.94652275862069,-118.23043827586207 33.94652275862069,-118.22918517241379 33.94652068965517,-118.22830724137931 33.946588965517236,-118.22829999999999 33.94659,-118.22773206896551 33.94656068965517,-118.22762620689656 33.94655793103448,-118.22675724137932 33.946467931034476,-118.22519931034483 33.946304827586204,-118.22163206896552 33.94590793103448,-118.21888931034482 33.94561379310345,-118.21770827586207 33.94548896551724,-118.21693620689655 33.94540379310345,-118.21679827586206 33.94538896551724,-118.21656 33.945364827586204,-118.21653724137931 33.945361724137925,-118.21644413793103 33.94535379310345,-118.21617931034483 33.94534275862068,-118.21385517241379 33.945112758620695,-118.21242620689655 33.944955862068966,-118.21119827586207 33.94482379310345,-118.20963 33.94465586206897,-118.2080872413793 33.94447586206897,-118.20793413793103 33.94446000000001,-118.20757517241378 33.944419999999994,-118.20436206896551 33.94407379310344,-118.19916724137931 33.943502758620696,-118.19799 33.94337379310345,-118.19789206896552 33.943362758620694,-118.19756517241379 33.94332586206896,-118.19656724137931 33.94321793103448,-118.19471827586207 33.94301379310345,-118.19301 33.94282586206897,-118.19052310344827 33.94256172413793,-118.18808931034482 33.94229482758621,-118.18582724137931 33.94204275862069,-118.18496206896552 33.94194689655173,-118.18385724137931 33.94182000000001,-118.18308206896552 33.94172689655173,-118.18221310344828 33.94162793103449,-118.18165413793103 33.94124689655172,-118.18165413793103 33.94124586206897,-118.1818351724138 33.93949689655173,-118.18217827586207 33.93655172413793,-118.18241310344828 33.93449172413793,-118.18251827586207 33.93358068965517,-118.1825651724138 33.93337586206897,-118.18290206896552 33.932443793103445,-118.18337827586207 33.93114,-118.18338310344828 33.93112793103448,-118.18188103448276 33.930809999999994,-118.18171206896551 33.93082482758621,-118.18076620689655 33.93091482758621,-118.17935724137931 33.93087586206896,-118.17764 33.93070482758621,-118.176 33.930541724137925,-118.17186517241379 33.93015586206897,-118.17006413793104 33.930049999999994,-118.1697451724138 33.930022758620694,-118.16837206896551 33.9299,-118.16808206896552 33.929874827586204,-118.16746413793103 33.9298248275862,-118.1658272413793 33.929600689655175,-118.16500034482759 33.92952,-118.16475413793103 33.9295048275862,-118.16198103448275 33.928921724137936,-118.16175827586207 33.92884275862069,-118.1594572413793 33.92746689655172,-118.15908206896552 33.92727275862069,-118.15804413793103 33.926780689655175,-118.15634 33.92617172413793,-118.15534620689655 33.92567689655172,-118.15478103448277 33.92539586206897,-118.15347413793103 33.924811724137925,-118.15196724137931 33.92399068965517,-118.14455517241379 33.92016586206897,-118.14135413793103 33.91839379310345,-118.13814310344827 33.91687,-118.13997206896552 33.914060000000006,-118.14063931034482 33.913173793103454,-118.14085413793103 33.91289896551724,-118.14085413793103 33.91289896551724,-118.14085413793103 33.91289896551724,-118.14085620689656 33.91289689655173,-118.14095724137931 33.91276793103448) };
    // let to_match = wkt! { LINESTRING(-118.14936828613281 34.15208435058594,-118.15211486816406 34.151512145996094,-118.15445709228516 34.15047836303711,-118.15656280517578 34.14927673339844,-118.16122436523438 34.14686965942383,-118.16417694091797 34.146121978759766,-118.16709899902344 34.1453857421875,-118.1808853149414 34.14147186279297,-118.18374633789062 34.142112731933594,-118.18879699707031 34.1445426940918,-118.1934585571289 34.146724700927734,-118.19573211669922 34.14777374267578,-118.19840240478516 34.148338317871094,-118.20127868652344 34.1479606628418,-118.20399475097656 34.146793365478516,-118.21334075927734 34.145103454589844,-118.21957397460938 34.145145416259766,-118.22274017333984 34.14567184448242,-118.22589874267578 34.14650344848633,-118.22881317138672 34.147823333740234,-118.24102020263672 34.155513763427734,-118.2472915649414 34.156578063964844,-118.26744842529297 34.15580368041992,-118.27687072753906 34.153648376464844,-118.2857666015625 34.15437316894531,-118.28829193115234 34.15542984008789,-118.29085540771484 34.155494689941406,-118.2992172241211 34.15620803833008,-118.30211639404297 34.15663528442383,-118.30802917480469 34.155853271484375,-118.31346893310547 34.154624938964844,-118.31629180908203 34.1549186706543,-118.32196044921875 34.15471267700195,-118.33056640625 34.15297317504883,-118.33651733398438 34.1530647277832,-118.3395767211914 34.153663635253906,-118.34278869628906 34.15404510498047,-118.34601593017578 34.15420150756836,-118.35194396972656 34.153297424316406,-118.35479736328125 34.153053283691406,-118.36084747314453 34.15327453613281,-118.3670883178711 34.15322494506836,-118.38282012939453 34.154640197753906,-118.38558959960938 34.15461349487305,-118.38838958740234 34.15461349487305,-118.39124298095703 34.15458679199219,-118.39413452148438 34.15459060668945,-118.40228271484375 34.156314849853516,-118.40511322021484 34.15687561035156,-118.41387176513672 34.156917572021484,-118.41668701171875 34.15691375732422,-118.4196548461914 34.15691375732422,-118.42890930175781 34.155738830566406,-118.43180847167969 34.15576171875,-118.43762969970703 34.15578842163086,-118.4404296875 34.15563201904297,-118.44328308105469 34.1552734375,-118.44585418701172 34.155845642089844,-118.44840240478516 34.15700149536133,-118.45941925048828 34.15924072265625,-118.46223449707031 34.15958023071289,-118.47279357910156 34.164306640625,-118.48946380615234 34.165340423583984,-118.49462127685547 34.16651916503906,-118.50147247314453 34.170753479003906,-118.50682067871094 34.17142105102539,-118.51219940185547 34.171356201171875,-118.5194091796875 34.17131805419922,-118.5275650024414 34.17134094238281,-118.5301742553711 34.171531677246094,-118.532958984375 34.172481536865234,-118.54495239257812 34.17360305786133,-118.57272338867188 34.17177963256836,-118.57816314697266 34.16971206665039,-118.58082580566406 34.168766021728516,-118.58978271484375 34.168373107910156,-118.60240936279297 34.170310974121094,-118.60814666748047 34.17091751098633,-118.61338806152344 34.168678283691406,-118.61873626708984 34.166099548339844,-118.62477111816406 34.16416549682617,-118.62772369384766 34.163116455078125,-118.63923645019531 34.158897399902344,-118.64205932617188 34.157859802246094,-118.650390625 34.15431213378906,-118.66248321533203 34.150333404541016,-118.66483306884766 34.14979553222656,-118.66728973388672 34.1495475769043,-118.67250061035156 34.1492805480957,-118.67781829833984 34.15078353881836,-118.68923950195312 34.150753021240234,-118.69487762451172 34.15091323852539,-118.69713592529297 34.14954376220703,-118.70330047607422 34.14419174194336,-118.70569610595703 34.14285659790039,-118.70802307128906 34.14165115356445,-118.71907806396484 34.138832092285156,-118.72441864013672 34.13825607299805,-118.72762298583984 34.13811111450195,-118.73292541503906 34.140811920166016,-118.7352294921875 34.14236068725586,-118.73782348632812 34.14325714111328,-118.74083709716797 34.14329528808594,-118.7440185546875 34.143272399902344,-118.74725341796875 34.14372253417969,-118.75052642822266 34.14440155029297,-118.76377868652344 34.14643096923828,-118.77362060546875 34.14756393432617,-118.77684783935547 34.14738464355469,-118.78012084960938 34.14712905883789,-118.78910827636719 34.146446228027344,-118.79216003417969 34.14629364013672,-118.79519653320312 34.14659881591797,-118.80105590820312 34.14825439453125,-118.8041000366211 34.149192810058594,-118.80699920654297 34.15010070800781,-118.82154846191406 34.155372619628906,-118.82404327392578 34.15704345703125,-118.82904815673828 34.16038131713867,-118.83412170410156 34.16381072998047,-118.84159851074219 34.16878890991211,-118.8468017578125 34.172218322753906,-118.8581314086914 34.176185607910156,-118.86113739013672 34.17638397216797,-118.86412811279297 34.17660140991211,-118.86724853515625 34.17682647705078,-118.8796157836914 34.17788314819336,-118.88247680664062 34.179115295410156,-118.887939453125 34.18182373046875,-118.89051818847656 34.1831169128418,-118.89311981201172 34.184295654296875,-118.8994140625 34.184669494628906,-118.91251373291016 34.18446350097656) };

    // let match_ = wkt! { LINESTRING(-118.1934585571289 34.146724700927734,-118.19573211669922 34.14777374267578,-118.19840240478516 34.148338317871094,-118.20127868652344 34.1479606628418,-118.20399475097656 34.146793365478516,-118.21334075927734 34.145103454589844) };
    // let easier = wkt! { LINESTRING (-118.618736 34.1661, -118.624771 34.164165, -118.627724 34.163116, -118.639236 34.158897, -118.642059 34.15786, -118.650391 34.154312, -118.662483 34.150333, -118.664833 34.149796) };
    // let not_one_way= wkt ! { LINESTRING (-118.624921 34.171867, -118.639126 34.171903, -118.643117 34.177157, -118.638396 34.178719, -118.632731 34.178897) };
    // let easiest = wkt! { LINESTRING (-118.624771 34.164165, -118.627724 34.163116) };

    // let isolated_issue = wkt! { LINESTRING(-118.49462127685547 34.16651916503906,-118.50147247314453 34.170753479003906,-118.50682067871094 34.17142105102539,-118.51219940185547 34.171356201171875,-118.5194091796875 34.17131805419922,-118.5275650024414 34.17134094238281) };
    // let westlake_village = wkt! { LINESTRING(-118.77684783935547 34.14738464355469,-118.78012084960938 34.14712905883789,-118.78910827636719 34.146446228027344,-118.79216003417969 34.14629364013672,-118.79519653320312 34.14659881591797,-118.80105590820312 34.14825439453125,-118.8041000366211 34.149192810058594,-118.80699920654297 34.15010070800781,-118.82154846191406 34.155372619628906,-118.82404327392578 34.15704345703125,-118.82904815673828 34.16038131713867,-118.83412170410156 34.16381072998047) };

    let as_coords = lax
        .coords()
        .map(|c| Coordinate {
            longitude: c.x,
            latitude: c.y,
        })
        .collect::<Vec<_>>();

    let route = tonic::Request::new(MapMatchRequest {
        data: as_coords,
        breakage_distance: None,
        search_distance: Some(200.0),
        timestamps: vec![],
        costing_method: i32::from(Costing::Car),
    });

    let start = Instant::now();
    let response = client.map_match(route).await?.into_inner();
    let elapsed = start.elapsed();

    let linestring = response
        .matches
        .first()
        .ok_or(Error)?
        .snapped_shape
        .iter()
        .map(|coord| coord! { x: coord.longitude, y: coord.latitude })
        .collect::<LineString>();

    let interpolated = response
        .matches
        .first()
        .ok_or(Error)?
        .interpolated
        .iter()
        .map(|coord| coord! { x: coord.longitude, y: coord.latitude })
        .collect::<LineString>();

    println!("Routed points: {}", linestring.wkt_string());
    println!("Interpolated path: {}", interpolated.wkt_string());

    let path = "routed.wkt";
    let mut output = File::create(path).unwrap();
    write!(output, "{}", interpolated.wkt_string()).expect("must write");

    println!("In: {}us ({}ms)", elapsed.as_micros(), elapsed.as_millis());

    Ok(())
}
