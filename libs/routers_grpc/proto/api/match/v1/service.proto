syntax = "proto3";
package api.match.v1;

import "api/match/v1/definition.proto";

service MatchService {
  // Matches an input route to a given underlying map.
  //
  // Uses a transition graph to probabilistically determine the
  // most likely set of points taken in order to traverse the
  // input coordinates.
  //
  // This algorithm should be used to matching positions accurately
  // to a network, useful when the exact edges and nodes traversed
  // are important. Useful when input coordinates are not precise
  // or contain error, since the algorithm will use a holistic
  // understanding of the network and request to produce an output.
  rpc Match(MatchRequest) returns (MatchResponse);

  // Naively snaps an input route to a given underlying map.
  // This RPC does so by finding the closest node on the network
  // to each input position, finding the fastest route between each.
  //
  // Should be used for visualisation tooling in aggregate, i.e.
  // understanding many trips at once. Useful when the map contains
  // nodes which are far apart, and input locations are precise.
  //
  // ### Notice
  //
  // This is faster than the Match call, however is not to be
  // used for accurate routing information since it does not have
  // a holistic understanding of the trips composition. Therefore,
  // classified as a naive match, a "snap".
  //
  rpc Snap(SnapRequest) returns (SnapResponse);
}
