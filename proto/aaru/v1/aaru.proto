syntax = "proto3";
package aaru.v1;

import "google/protobuf/timestamp.proto";

// The routing service
service RouterService {
  // Returns the appropriate route between the starting and ending locations.
  rpc Route(RouteRequest) returns (RouteResponse);
  rpc MapMatch(MapMatchRequest) returns (MapMatchResponse);
  rpc ClosestPoint(ClosestPointRequest) returns (ClosestPointResponse);
  rpc ClosestSnappedPoint(ClosestSnappedPointRequest) returns (ClosestSnappedPointResponse);
}

message Coordinate {
  double latitude = 1;
  double longitude = 2;
}

enum Costing {
  COSTING_UNSPECIFIED = 0;
  COSTING_CAR = 1;
}

message MapMatchRequest {
  // A list of coordinates to match
  repeated Coordinate data = 1;
  // A list of timestamps to match, each timestamp corresponds to a coordinate. Lengths are expected to be equal.
  repeated google.protobuf.Timestamp timestamps = 2;

  // The distance (in m) used to search for the closest edges, using a square scan.
  // The default value is 20 meters.
  double search_distance = 3;

  // The maximum distance (in m) between coordinates before a new route is started.
  double breakage_distance = 4;

  // The vehicle costing method to use for map matching.
  Costing costing_method = 5;
}

// EdgeInfo
//
// Describes the edges within the graph that was transitioned.
// This allows for the evaluation of features such as those derrived
// from street names, consistency of edge transitions, etc.
//
// The edge is described by the following diagram:
//
//                             75%
//                          Departure
//                              |
//         + ---- + ---- + ---- + ---- + End of edge
//   Start of edge       |
//                     Join
//                      50%
//
// Where there is a `source` and `target` node within the edge,
// with id, `id`. The edge's length is the length the matched
// vehicle travelled, not its raw length.
//
// The edge contains multiple "names", which describe all the
// possible names of the given edge, including road names.
//
// The `join_percent` and `depart_percent` describe the percentage
// of the edge that the vehicle was on when it joined and departed
// the edge, respectively, see diagram.
//
// The `length` is the length of the edge in the match, in meters,
// not the length of the underlying edge.
//
// The final fields are largely optional, surfacing underlying data
// attributes on the OSM edge to make analysis convenient. This
// includes: `speed_limit`, `surface`, and `lane_count`.
//
message EdgeInfo {
    uint32 id = 1;
    uint32 source = 2;
    uint32 target = 3;

    repeated string names = 4;

    uint32 join_percent = 5;
    uint32 depart_percent = 6;
    uint32 length = 7;

    uint32 lane_count = 8;
    uint32 speed_limit = 9;
    string surface = 10;
}

message MatchedRoute {
  repeated Coordinate snapped_shape = 1;
  repeated Coordinate interpolated = 2;
  repeated EdgeInfo edges = 3;

  string label = 4; // Not sure what this would be yet.
  uint32 cost = 5;
}

message MapMatchResponse {
  repeated MatchedRoute matchings = 1;
  repeated string warnings = 2;
}

// The request message containing the user's name.
message RouteRequest {
  Coordinate start = 1;
  Coordinate end = 2;
  Costing costing_method = 3;
}

// The response message including pathing, and weighted heuristics
message RouteResponse {
  repeated Coordinate shape = 1;
  uint32 cost = 2;
}

// Specifies the distance and a position from which to search
message ClosestSnappedPointRequest {
  Coordinate point = 1;
  double search_radius = 2;
}

message ClosestPointRequest {
  Coordinate coordinate = 1;
}

message ClosestPointResponse {
  Coordinate coordinate = 1;
}

message ClosestSnappedPointResponse {
  Coordinate coordinate = 1;
}
