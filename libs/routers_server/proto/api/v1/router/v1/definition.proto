syntax = "proto3";
package api.v1.router.v1;

import "google/protobuf/timestamp.proto";
import "api/v1/geo.proto";

enum Costing {
  COSTING_UNSPECIFIED = 0;
  COSTING_CAR = 1;
}

message MapMatchRequest {
  // A list of coordinates to match
  repeated Coordinate data = 1;
  // A list of timestamps to match, each timestamp corresponds to a coordinate. Lengths are expected to be equal.
  repeated google.protobuf.Timestamp timestamps = 2;

  // The distance (in m) used to search for the closest edges, using a square scan.
  // The default value is 20 meters.
  optional double search_distance = 3;

  // The maximum distance (in m) between coordinates before a new route is started.
  optional double breakage_distance = 4;

  // The vehicle costing method to use for map matching.
  Costing costing_method = 5;
}

message MapMatchResponse {
  repeated MatchedRoute matches = 1;
  repeated string warnings = 2;
}

message MatchedRoute {
  repeated Coordinate snapped_shape = 1;
  repeated Coordinate interpolated = 2;
  repeated EdgeInfo edges = 3;

  string label = 4; // Not sure what this would be yet.
  uint32 cost = 5;
}

// The request message containing the user's name.
message RouteRequest {
  Coordinate start = 1;
  Coordinate end = 2;
  Costing costing_method = 3;
}

// The response message including pathing, and weighted heuristics
message RouteResponse {
  repeated Coordinate shape = 1;
  uint32 cost = 2;
}

message ClosestPointRequest {
  Coordinate coordinate = 1;
}

message ClosestPointResponse {
  Coordinate coordinate = 1;
}

// Specifies the distance and a position from which to search
message ClosestSnappedPointRequest {
  Coordinate point = 1;
  double search_radius = 2;
}

message ClosestSnappedPointResponse {
  Coordinate coordinate = 1;
}
