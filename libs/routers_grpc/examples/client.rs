use geo::{LineString, coord, wkt};
use std::fmt::Error;
use std::fs::File;
use std::io::Write;
use tokio;
use tokio::time::Instant;
use tonic;
use tonic::transport::Channel;
use wkt::ToWkt;

use routers_server::r#match::*;
use routers_server::model::*;

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    let channel = Channel::from_static("http://[::1]:9001").connect().await?;
    let mut client = MatchServiceClient::new(channel);

    let lax = wkt! { LINESTRING (-118.39284413793104 33.95046379310345,-118.39299413793103 33.950623793103446,-118.39299413793103 33.95062793103449,-118.39221517241378 33.95125586206896,-118.39215620689654 33.951256896551726,-118.39205827586207 33.95126068965517,-118.39193620689656 33.951265862068965,-118.39193620689656 33.951265862068965,-118.39181827586208 33.95348793103449,-118.39050620689656 33.952772758620696,-118.38869413793103 33.95263172413793,-118.38683310344828 33.95263,-118.38588413793104 33.95196,-118.38592827586207 33.94996896551724,-118.38595310344827 33.94892379310345,-118.38598413793103 33.947756896551724,-118.38601413793103 33.94685586206897,-118.38603931034483 33.9462148275862,-118.38604206896551 33.94614172413793,-118.38606724137931 33.94549275862069,-118.38562827586208 33.94538482758621,-118.38469620689655 33.94539,-118.3824151724138 33.94539896551724,-118.38166517241379 33.94540068965517,-118.38092 33.94540172413794,-118.37987413793104 33.9454048275862,-118.37938517241379 33.94540586206897,-118.37918931034483 33.94540586206897,-118.37877724137931 33.94540275862069,-118.37799206896551 33.9453148275862,-118.37570931034483 33.945301724137934,-118.37283206896552 33.945318965517245,-118.3711251724138 33.94532586206897,-118.36947206896551 33.94533793103449,-118.36947206896551 33.94533793103449,-118.36708724137931 33.94537,-118.36512724137931 33.94537275862069,-118.36483724137932 33.94537379310344,-118.36352620689655 33.94537379310344,-118.36188827586207 33.94536689655172,-118.36088517241379 33.94536793103448,-118.36013310344828 33.94536896551725,-118.35351 33.945386896551724,-118.35278827586207 33.94539379310345,-118.35278 33.94539379310345,-118.34726724137931 33.945382758620696,-118.34618413793103 33.94539068965517,-118.34430620689656 33.945391724137934,-118.34368103448276 33.94539379310345,-118.34324517241379 33.94539379310345,-118.34129206896552 33.94540068965517,-118.3401551724138 33.9454048275862,-118.33823310344827 33.945410689655176,-118.3360351724138 33.94541689655172,-118.33538724137931 33.94541896551725,-118.33497517241379 33.945420689655165,-118.33476931034483 33.945420689655165,-118.33289206896552 33.94542689655172,-118.33284724137931 33.94542793103449,-118.33229827586207 33.94542793103449,-118.33097827586207 33.94542896551724,-118.32939413793103 33.945420689655165,-118.32801931034483 33.945413793103455,-118.32650103448276 33.945413793103455,-118.32569827586207 33.94541689655172,-118.32175931034483 33.945420689655165,-118.31951103448276 33.94540275862069,-118.31813 33.94546586206897,-118.31789413793103 33.94546586206897,-118.31100413793104 33.94546482758621,-118.30953206896552 33.94546068965518,-118.30918103448276 33.94546068965518,-118.30915827586207 33.94546,-118.30845620689655 33.94546,-118.30527517241379 33.94546689655172,-118.30365620689656 33.94547,-118.30049103448276 33.94544379310345,-118.30048310344827 33.94544379310345,-118.29970413793103 33.94544689655173,-118.29628 33.945481724137935,-118.29528034482759 33.94548379310345,-118.29206827586208 33.94548379310345,-118.29206034482758 33.94548379310345,-118.29201517241378 33.94548379310345,-118.29127310344828 33.94549379310345,-118.28981 33.945498965517245,-118.28662827586207 33.94551,-118.28649827586207 33.945510689655165,-118.2852851724138 33.94551482758621,-118.28239413793104 33.945532758620686,-118.28212724137931 33.945532758620686,-118.28055517241378 33.945543793103454,-118.27870931034482 33.945544827586204,-118.27780931034482 33.94555,-118.27768724137931 33.94554896551725,-118.27704517241379 33.94555172413793,-118.27391 33.94557793103448,-118.27340620689655 33.94557896551724,-118.27325413793103 33.94558000000001,-118.27216310344828 33.94558172413794,-118.2706672413793 33.94559068965518,-118.2691572413793 33.94560172413793,-118.26737206896551 33.9456,-118.26575310344828 33.945597931034484,-118.2653651724138 33.945600689655166,-118.26521310344827 33.945602758620694,-118.26515517241378 33.94518586206897,-118.26516206896551 33.94397689655172,-118.26516206896551 33.9438848275862,-118.26516206896551 33.94386586206896,-118.26471000000001 33.943741724137936,-118.26464931034482 33.94373896551724,-118.26125310344827 33.94330896551725,-118.25828517241379 33.94330275862069,-118.2507172413793 33.94328068965517,-118.24926034482758 33.94328068965517,-118.24877103448276 33.94328,-118.24869517241379 33.94328,-118.24784103448276 33.94327586206897,-118.2466051724138 33.94325379310345,-118.24643 33.94324896551724,-118.24594931034483 33.94323586206896,-118.24278931034482 33.94319172413793,-118.24278103448276 33.94319172413793,-118.24221931034484 33.94322482758621,-118.23951 33.943146896551724,-118.2393951724138 33.94314482758621,-118.23935 33.943143793103445,-118.23754931034483 33.943134827586206,-118.23675310344828 33.94359896551724,-118.23675310344828 33.94364896551724,-118.23675931034484 33.94560482758621,-118.23661206896551 33.94569,-118.23479724137931 33.946537931034484,-118.23359034482758 33.946529999999996,-118.23243 33.94652068965517,-118.23126931034483 33.94652068965517,-118.2305672413793 33.94652275862069,-118.23043827586207 33.94652275862069,-118.22918517241379 33.94652068965517,-118.22830724137931 33.946588965517236,-118.22829999999999 33.94659,-118.22773206896551 33.94656068965517,-118.22762620689656 33.94655793103448,-118.22675724137932 33.946467931034476,-118.22519931034483 33.946304827586204,-118.22163206896552 33.94590793103448,-118.21888931034482 33.94561379310345,-118.21770827586207 33.94548896551724,-118.21693620689655 33.94540379310345,-118.21679827586206 33.94538896551724,-118.21656 33.945364827586204,-118.21653724137931 33.945361724137925,-118.21644413793103 33.94535379310345,-118.21617931034483 33.94534275862068,-118.21385517241379 33.945112758620695,-118.21242620689655 33.944955862068966,-118.21119827586207 33.94482379310345,-118.20963 33.94465586206897,-118.2080872413793 33.94447586206897,-118.20793413793103 33.94446000000001,-118.20757517241378 33.944419999999994,-118.20436206896551 33.94407379310344,-118.19916724137931 33.943502758620696,-118.19799 33.94337379310345,-118.19789206896552 33.943362758620694,-118.19756517241379 33.94332586206896,-118.19656724137931 33.94321793103448,-118.19471827586207 33.94301379310345,-118.19301 33.94282586206897,-118.19052310344827 33.94256172413793,-118.18808931034482 33.94229482758621,-118.18582724137931 33.94204275862069,-118.18496206896552 33.94194689655173,-118.18385724137931 33.94182000000001,-118.18308206896552 33.94172689655173,-118.18221310344828 33.94162793103449,-118.18165413793103 33.94124689655172,-118.18165413793103 33.94124586206897,-118.1818351724138 33.93949689655173,-118.18217827586207 33.93655172413793,-118.18241310344828 33.93449172413793,-118.18251827586207 33.93358068965517,-118.1825651724138 33.93337586206897,-118.18290206896552 33.932443793103445,-118.18337827586207 33.93114,-118.18338310344828 33.93112793103448,-118.18188103448276 33.930809999999994,-118.18171206896551 33.93082482758621,-118.18076620689655 33.93091482758621,-118.17935724137931 33.93087586206896,-118.17764 33.93070482758621,-118.176 33.930541724137925,-118.17186517241379 33.93015586206897,-118.17006413793104 33.930049999999994,-118.1697451724138 33.930022758620694,-118.16837206896551 33.9299,-118.16808206896552 33.929874827586204,-118.16746413793103 33.9298248275862,-118.1658272413793 33.929600689655175,-118.16500034482759 33.92952,-118.16475413793103 33.9295048275862,-118.16198103448275 33.928921724137936,-118.16175827586207 33.92884275862069,-118.1594572413793 33.92746689655172,-118.15908206896552 33.92727275862069,-118.15804413793103 33.926780689655175,-118.15634 33.92617172413793,-118.15534620689655 33.92567689655172,-118.15478103448277 33.92539586206897,-118.15347413793103 33.924811724137925,-118.15196724137931 33.92399068965517,-118.14455517241379 33.92016586206897,-118.14135413793103 33.91839379310345,-118.13814310344827 33.91687,-118.13997206896552 33.914060000000006,-118.14063931034482 33.913173793103454,-118.14085413793103 33.91289896551724,-118.14085413793103 33.91289896551724,-118.14085413793103 33.91289896551724,-118.14085620689656 33.91289689655173,-118.14095724137931 33.91276793103448) };

    let as_coords = lax
        .coords()
        .map(|c| Coordinate {
            longitude: c.x,
            latitude: c.y,
        })
        .collect::<Vec<_>>();

    let route = tonic::Request::new(MatchRequest {
        data: as_coords,
        breakage_distance: None,
        search_distance: Some(200.0),
        timestamps: vec![],
        costing_method: i32::from(Costing::Car),
    });

    let start = Instant::now();
    let response = client.r#match(route).await?.into_inner();
    let elapsed = start.elapsed();

    let linestring = response
        .matches
        .first()
        .ok_or(Error)?
        .snapped_shape
        .iter()
        .map(|coord| coord! { x: coord.longitude, y: coord.latitude })
        .collect::<LineString>();

    let interpolated = response
        .matches
        .first()
        .ok_or(Error)?
        .interpolated
        .iter()
        .map(|coord| coord! { x: coord.longitude, y: coord.latitude })
        .collect::<LineString>();

    println!("Routed points: {}", linestring.wkt_string());
    println!("Interpolated path: {}", interpolated.wkt_string());

    let path = "routed.wkt";
    let mut output = File::create(path).unwrap();
    write!(output, "{}", interpolated.wkt_string()).expect("must write");

    println!("In: {}us ({}ms)", elapsed.as_micros(), elapsed.as_millis());

    Ok(())
}
